[{"path":[]},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"install-and-test-drive","dir":"Articles","previous_headings":"","what":"Install and test drive","title":"gapminder","text":"Install gapminder CRAN: Load test drive data aggregation plotting:","code":"install.packages(\"gapminder\") library(gapminder) library(dplyr) library(ggplot2)  aggregate(lifeExp ~ continent, gapminder, median) #>   continent lifeExp #> 1    Africa 47.7920 #> 2  Americas 67.0480 #> 3      Asia 61.7915 #> 4    Europe 72.2410 #> 5   Oceania 73.6650  gapminder %>%   filter(year == 2007) %>%   group_by(continent) %>%   summarise(lifeExp = median(lifeExp)) #> # A tibble: 5 × 2 #>   continent lifeExp #>   <fct>       <dbl> #> 1 Africa       52.9 #> 2 Americas     72.9 #> 3 Asia         72.4 #> 4 Europe       78.6 #> 5 Oceania      80.7  ggplot(gapminder, aes(x = continent, y = lifeExp)) +   geom_boxplot(outlier.colour = \"hotpink\") +   geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1 / 4)"},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"color-schemes-for-countries-and-continents","dir":"Articles","previous_headings":"","what":"Color schemes for countries and continents","title":"gapminder","text":"country_colors continent_colors provided character vectors elements hex colors names countries continents.  color schemes available : PNG PDF, package’s GitHub repo continent-colors.tsv country-colors.tsv, part installed package","code":"head(country_colors, 4) #>          Nigeria            Egypt         Ethiopia Congo, Dem. Rep.  #>        \"#7F3B08\"        \"#833D07\"        \"#873F07\"        \"#8B4107\" head(continent_colors) #>    Africa  Americas      Asia    Europe   Oceania  #> \"#7F3B08\" \"#A50026\" \"#40004B\" \"#276419\" \"#313695\""},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"how-to-use-the-color-scheme-in-ggplot2","dir":"Articles","previous_headings":"","what":"How to use the color scheme in ggplot2","title":"gapminder","text":"Provide country_colors scale_color_manual() like :","code":"... + scale_color_manual(values = country_colors) + ... library(\"ggplot2\")  ggplot(   subset(gapminder, continent != \"Oceania\"),   aes(x = year, y = lifeExp, group = country, color = country) ) +   geom_line(linewidth = 0.8, show.legend = FALSE) +   facet_wrap(~continent) +   scale_color_manual(values = country_colors) +   theme_bw() +   theme(     strip.text = element_text(size = rel(0.8)),     axis.text.x = element_text(angle = 45, hjust=1)   )"},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"how-to-use-the-color-scheme-in-base-graphics","dir":"Articles","previous_headings":"","what":"How to use the color scheme in base graphics","title":"gapminder","text":"","code":"# for convenience, integrate the country colors into the data.frame gap_with_colors <-data.frame(   gapminder,   cc = I(country_colors[match(gapminder$country, names(country_colors))]) )  # bubble plot, focus just on Africa and Europe in 2007 keepers <- with(   gap_with_colors,   continent %in% c(\"Africa\", \"Europe\") & year == 2007 ) plot(lifeExp ~ gdpPercap, gap_with_colors,   subset = keepers, log = \"x\", pch = 21,   cex = sqrt(gap_with_colors$pop[keepers] / pi) / 1500,   bg = gap_with_colors$cc[keepers] )"},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"iso-3166-1-country-codes","dir":"Articles","previous_headings":"","what":"ISO 3166-1 country codes","title":"gapminder","text":"country_codes data frame provides ISO 3166-1 country codes countries gapminder gapminder_unfiltered data frames. can used practice joining merging.","code":"library(dplyr)  gapminder %>%   filter(year == 2007, country %in% c(\"Kenya\", \"Peru\", \"Syria\")) %>%   select(country, continent) %>%   left_join(country_codes) #> # A tibble: 3 × 4 #>   country continent iso_alpha iso_num #>   <chr>   <fct>     <chr>       <int> #> 1 Kenya   Africa    KEN           404 #> 2 Peru    Americas  PER           604 #> 3 Syria   Asia      SYR           760"},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"what-is-gapminder-good-for","dir":"Articles","previous_headings":"","what":"What is gapminder good for?","title":"gapminder","text":"excerpt used STAT 545, R-flavored Software Carpentry Workshops ggplot2 tutorial. gapminder useful teaching novices data wrangling visualization R. Description: 1704 observations; fills size niche iris (150 rows) likes diamonds (54K rows) country factor 142 levels continent, factor 5 levels year: going 1952 2007 increments 5 years pop: population gdpPercap: GDP per capita lifeExp: life expectancy 12 rows country gapminder, .e. complete data 1952, 1957, …, 2007. two factors provide opportunities demonstrate factor handling, aggregation visualization, factors many levels. four quantitative variables generally quite correlated trends interesting relationships country continent, find simple plots aggregations tell reasonable story completely boring. Visualization temporal trends life expectancy, country, particularly rewarding, since several countries sharp drops due political upheaval. motivates systematic investigations via data aggregation proactively identify countries whose data exhibits certain properties.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"how-this-sausage-was-made","dir":"Articles","previous_headings":"","what":"How this sausage was made","title":"gapminder","text":"Data cleaning code clean. sort sin eater. data-raw directory contains Excel spreadsheets downloaded Gapminder 2008 2009 scripts necessary create everything package, raw “compiled notebook” form.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"plain-text-delimited-files","dir":"Articles","previous_headings":"","what":"Plain text delimited files","title":"gapminder","text":"want practice importing file, various tab delimited files included: gapminder.tsv: dataset available via library(\"gapminder\"); gapminder gapminder-unfiltered.tsv: larger dataset available via library(\"gapminder\"); gapminder_unfiltered. continent-colors.tsv country-colors.tsv: color schemes package’s GitHub repo, delimited files can found: inst/extdata/ sub-directory ’ve installed gapminder package can found locally used like :","code":"gap_tsv <- system.file(\"extdata\", \"gapminder.tsv\", package = \"gapminder\") gap_tsv <- read.delim(gap_tsv) str(gap_tsv) #> 'data.frame':    1704 obs. of  6 variables: #>  $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ... #>  $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ... #>  $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ... #>  $ lifeExp  : num  28.8 30.3 32 34 36.1 ... #>  $ pop      : int  8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ... #>  $ gdpPercap: num  779 821 853 836 740 ... gap_tsv %>% # Bhutan did not make the cut because data for only 8 years :(   filter(country == \"Bhutan\") #> [1] country   continent year      lifeExp   pop       gdpPercap #> <0 rows> (or 0-length row.names)  gap_bigger_tsv <-   system.file(\"extdata\", \"gapminder-unfiltered.tsv\", package = \"gapminder\") gap_bigger_tsv <- read.delim(gap_bigger_tsv) str(gap_bigger_tsv) #> 'data.frame':    3313 obs. of  6 variables: #>  $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ... #>  $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ... #>  $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ... #>  $ lifeExp  : num  28.8 30.3 32 34 36.1 ... #>  $ pop      : int  8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ... #>  $ gdpPercap: num  779 821 853 836 740 ... gap_bigger_tsv %>% # Bhutan IS here though! :)   filter(country == \"Bhutan\") #>   country continent year lifeExp     pop gdpPercap #> 1  Bhutan      Asia 1972  41.837 1087991  807.6226 #> 2  Bhutan      Asia 1977  44.708 1205659  816.3102 #> 3  Bhutan      Asia 1982  47.872 1333704  946.8130 #> 4  Bhutan      Asia 1987  50.717 1490857 1494.2901 #> 5  Bhutan      Asia 1992  54.471 1673428 1904.1795 #> 6  Bhutan      Asia 1997  58.929 1876236 2561.5077 #> 7  Bhutan      Asia 2002  63.458 2094176 3256.0193 #> 8  Bhutan      Asia 2007  65.625 2327849 4744.6400  read.delim(   system.file(\"extdata\", \"continent-colors.tsv\", package = \"gapminder\") ) #>   continent n_cty   color #> 1    Africa    52 #7F3B08 #> 2  Americas    25 #A50026 #> 3      Asia    33 #40004B #> 4    Europe    30 #276419 #> 5   Oceania     2 #313695  head(   read.delim(     system.file(\"extdata\", \"country-colors.tsv\", package = \"gapminder\")   ) ) #>            country   color continent #> 1          Nigeria #7F3B08    Africa #> 2            Egypt #833D07    Africa #> 3         Ethiopia #873F07    Africa #> 4 Congo, Dem. Rep. #8B4107    Africa #> 5     South Africa #8F4407    Africa #> 6            Sudan #934607    Africa"},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"gapminder","text":"Gapminder’s data released Creative Commons Attribution 3.0 Unported license. See terms use.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/articles/gapminder.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"gapminder","text":"Run command get info cite package. ’ve installed gapminder CRAN, year populated populated correctly (unlike ).","code":"citation(\"gapminder\") #> To cite package 'gapminder' in publications use: #>  #>   Bryan J (2025). _gapminder: Data from Gapminder_. R package version #>   1.0.0.9000, <https://github.com/jennybc/gapminder>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {gapminder: Data from Gapminder}, #>     author = {Jennifer Bryan}, #>     year = {2025}, #>     note = {R package version 1.0.0.9000}, #>     url = {https://github.com/jennybc/gapminder}, #>   }"},{"path":"https://jennybc.github.io/gapminder/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jennifer Bryan. Author, maintainer.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryan J (2025). gapminder: Data Gapminder. R package version 1.0.0.9000, https://github.com/jennybc/gapminder.","code":"@Manual{,   title = {gapminder: Data from Gapminder},   author = {Jennifer Bryan},   year = {2025},   note = {R package version 1.0.0.9000},   url = {https://github.com/jennybc/gapminder}, }"},{"path":"https://jennybc.github.io/gapminder/dev/index.html","id":"gapminder","dir":"","previous_headings":"","what":"Data from Gapminder","title":"Data from Gapminder","text":"repo data package excerpt Gapminder data. main object package gapminder data frame “tibble”. goodies, data tab delimited form, larger unfiltered dataset, premade color schemes countries continents, ISO 3166-1 country codes. primary use case teaching writing examples.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data from Gapminder","text":"Install gapminder CRAN:","code":"install.packages(\"gapminder\")"},{"path":"https://jennybc.github.io/gapminder/dev/index.html","id":"quick-look","dir":"","previous_headings":"","what":"Quick look","title":"Data from Gapminder","text":"bit data aggregation plotting gapminder data:  , see Get started vignette.","code":"library(gapminder) library(dplyr) library(ggplot2)  aggregate(lifeExp ~ continent, gapminder, median) #>   continent lifeExp #> 1    Africa 47.7920 #> 2  Americas 67.0480 #> 3      Asia 61.7915 #> 4    Europe 72.2410 #> 5   Oceania 73.6650  gapminder %>%   filter(year == 2007) %>%   group_by(continent) %>%   summarise(lifeExp = median(lifeExp)) #> # A tibble: 5 × 2 #>   continent lifeExp #>   <fct>       <dbl> #> 1 Africa       52.9 #> 2 Americas     72.9 #> 3 Asia         72.4 #> 4 Europe       78.6 #> 5 Oceania      80.7  ggplot(gapminder, aes(x = continent, y = lifeExp)) +   geom_boxplot(outlier.colour = \"hotpink\") +   geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1 / 4)"},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Country codes — country_codes","title":"Country codes — country_codes","text":"Country codes","code":""},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country codes — country_codes","text":"","code":"country_codes"},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country codes — country_codes","text":"Data frame Gapminder country names ISO 3166-1 country codes: country Country name. iso_alpha 3-letter ISO 3166-1 alpha-3 code. iso_num 3-digit ISO 3166-1 numeric-3 code. Also includes countries covered supplemental data frame gapminder_unfiltered.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Country codes — country_codes","text":"","code":"if (require(\"dplyr\")) {   gapminder %>%     filter(year == 2007, country %in% c(\"Kenya\", \"Peru\", \"Syria\")) %>%     select(country, continent) %>%     left_join(country_codes) } #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Joining with `by = join_by(country)` #> # A tibble: 3 × 4 #>   country continent iso_alpha iso_num #>   <chr>   <fct>     <chr>       <int> #> 1 Kenya   Africa    KEN           404 #> 2 Peru    Americas  PER           604 #> 3 Syria   Asia      SYR           760"},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Gapminder color schemes. — country_colors","title":"Gapminder color schemes. — country_colors","text":"Color schemes countries continents Gapminder data.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gapminder color schemes. — country_colors","text":"","code":"country_colors"},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gapminder color schemes. — country_colors","text":"Named character vectors giving country continent colors: country_colors colors 142 countries continent_colors colors 5 continents","code":""},{"path":[]},{"path":"https://jennybc.github.io/gapminder/dev/reference/country_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gapminder color schemes. — country_colors","text":"","code":"# ggplot2 examples are below these base graphics examples!  # using country_colors with base graphics  # for convenience, integrate the country colors into the data.frame gap_with_colors <-   data.frame(gapminder,     cc = I(country_colors[match(       gapminder$country,       names(country_colors)     )])   )  # bubble plot, focus just on Africa and Europe in 2007 keepers <- with(   gap_with_colors,   continent %in% c(\"Africa\", \"Europe\") & year == 2007 ) plot(lifeExp ~ gdpPercap, gap_with_colors,   subset = keepers, log = \"x\", pch = 21,   cex = sqrt(gap_with_colors$pop[keepers] / pi) / 1500,   bg = gap_with_colors$cc[keepers] )   if (require(ggplot2)) {   # with ggplot2, just provide country_colors to scale_color_manual():   # ... + scale_color_manual(values = country_colors) + ...    # simple line plot for 5 countries   h_countries <- c(\"Egypt\", \"Haiti\", \"Romania\", \"Thailand\", \"Venezuela\")   h_dat <- droplevels(subset(gapminder, country %in% h_countries))   h_dat$country <- with(h_dat, reorder(country, lifeExp, max))   ggplot(h_dat, aes(x = year, y = lifeExp)) +     geom_line(aes(color = country)) +     scale_colour_manual(values = country_colors) +     guides(color = guide_legend(reverse = TRUE))    # spaghetti plot for lots of countries   ggplot(     subset(gapminder, continent != \"Oceania\"),     aes(x = year, y = lifeExp, group = country, color = country)   ) +     geom_line(lwd = 1, show.legend = FALSE) +     facet_wrap(~continent) +     scale_color_manual(values = country_colors) +     theme_bw() +     theme(strip.text = element_text(size = rel(1.1)))    # bubble plot for lots of countries   gap_bit <- subset(gapminder, year == 2007 & continent != \"Oceania\")   gap_bit <- gap_bit[with(gap_bit, order(continent, -1 * pop)), ]   ggplot(gap_bit, aes(x = gdpPercap, y = lifeExp, size = pop)) +     scale_x_log10(limits = c(150, 115000)) +     ylim(c(16, 96)) +     geom_point(pch = 21, color = \"grey20\", show.legend = FALSE) +     scale_size_area(max_size = 40) +     facet_wrap(~continent) +     coord_fixed(ratio = 1 / 43) +     aes(fill = country) +     scale_fill_manual(values = country_colors) +     theme_bw() +     theme(strip.text = element_text(size = rel(1.1))) } #> Loading required package: ggplot2"},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder.html","id":null,"dir":"Reference","previous_headings":"","what":"Gapminder data — gapminder","title":"Gapminder data — gapminder","text":"Excerpt Gapminder data life expectancy, GDP per capita, population country.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gapminder data — gapminder","text":"","code":"gapminder"},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gapminder data — gapminder","text":"main data frame gapminder 1704 rows 6 variables: country factor 142 levels continent factor 5 levels year ranges 1952 2007 increments 5 years lifeExp life expectancy birth, years pop population gdpPercap GDP per capita (US$, inflation-adjusted) supplemental data frame gapminder_unfiltered filtered year complete data 3313 rows.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gapminder data — gapminder","text":"https://www.gapminder.org/data/","code":""},{"path":[]},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gapminder data — gapminder","text":"","code":"str(gapminder) #> tibble [1,704 × 6] (S3: tbl_df/tbl/data.frame) #>  $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ... #>  $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ... #>  $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ... #>  $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ... #>  $ gdpPercap: num [1:1704] 779 821 853 836 740 ... head(gapminder) #> # A tibble: 6 × 6 #>   country     continent  year lifeExp      pop gdpPercap #>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> #> 1 Afghanistan Asia       1952    28.8  8425333      779. #> 2 Afghanistan Asia       1957    30.3  9240934      821. #> 3 Afghanistan Asia       1962    32.0 10267083      853. #> 4 Afghanistan Asia       1967    34.0 11537966      836. #> 5 Afghanistan Asia       1972    36.1 13079460      740. #> 6 Afghanistan Asia       1977    38.4 14880372      786. summary(gapminder) #>         country        continent        year         lifeExp      #>  Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60   #>  Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20   #>  Algeria    :  12   Asia    :396   Median :1980   Median :60.71   #>  Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47   #>  Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85   #>  Australia  :  12                  Max.   :2007   Max.   :82.60   #>  (Other)    :1632                                                 #>       pop              gdpPercap        #>  Min.   :6.001e+04   Min.   :   241.2   #>  1st Qu.:2.794e+06   1st Qu.:  1202.1   #>  Median :7.024e+06   Median :  3531.8   #>  Mean   :2.960e+07   Mean   :  7215.3   #>  3rd Qu.:1.959e+07   3rd Qu.:  9325.5   #>  Max.   :1.319e+09   Max.   :113523.1   #>                                         table(gapminder$continent) #>  #>   Africa Americas     Asia   Europe  Oceania  #>      624      300      396      360       24  aggregate(lifeExp ~ continent, gapminder, median) #>   continent lifeExp #> 1    Africa 47.7920 #> 2  Americas 67.0480 #> 3      Asia 61.7915 #> 4    Europe 72.2410 #> 5   Oceania 73.6650 plot(lifeExp ~ year, gapminder, subset = country == \"Cambodia\", type = \"b\")  plot(lifeExp ~ gdpPercap, gapminder, subset = year == 2007, log = \"x\")   if (require(\"dplyr\")) {   gapminder %>%     filter(year == 2007) %>%     group_by(continent) %>%     summarise(lifeExp = median(lifeExp))    # how many unique countries does the data contain, by continent?   gapminder %>%     group_by(continent) %>%     summarize(n_obs = n(), n_countries = n_distinct(country))    # by continent, which country experienced the sharpest 5-year drop in   # life expectancy and what was the drop?   gapminder %>%     group_by(continent, country) %>%     select(country, year, continent, lifeExp) %>%     mutate(le_delta = lifeExp - lag(lifeExp)) %>%     summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%     filter(min_rank(worst_le_delta) < 2) %>%     arrange(worst_le_delta) } #> `summarise()` has grouped output by 'continent'. You can override using the #> `.groups` argument. #> # A tibble: 5 × 3 #> # Groups:   continent [5] #>   continent country     worst_le_delta #>   <fct>     <fct>                <dbl> #> 1 Africa    Rwanda             -20.4   #> 2 Asia      Cambodia            -9.10  #> 3 Americas  El Salvador         -1.51  #> 4 Europe    Montenegro          -1.46  #> 5 Oceania   Australia            0.170"},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder_unfiltered.html","id":null,"dir":"Reference","previous_headings":"","what":"Gapminder data, unfiltered. — gapminder_unfiltered","title":"Gapminder data, unfiltered. — gapminder_unfiltered","text":"supplemental data frame gapminder_unfiltered filtered year complete data 3313 rows. Everything else documented gapminder.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder_unfiltered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gapminder data, unfiltered. — gapminder_unfiltered","text":"","code":"gapminder_unfiltered"},{"path":"https://jennybc.github.io/gapminder/dev/reference/gapminder_unfiltered.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gapminder data, unfiltered. — gapminder_unfiltered","text":"object class tbl_df (inherits tbl, data.frame) 3313 rows 6 columns.","code":""},{"path":[]},{"path":"https://jennybc.github.io/gapminder/dev/news/index.html","id":"gapminder-100","dir":"Changelog","previous_headings":"","what":"gapminder 1.0.0","title":"gapminder 1.0.0","text":"CRAN release: 2023-03-10 3-letter numeric country codes “Korea, Dem. Rep.” (Democratic People’s Republic Korea, .k.. North Korea) corrected “PRK” (“KOR”) 408 (410). Previously, country erroneously getting codes “Korea, Rep.” (Republic Korea, .k.. South Korea). release version 1.0.0 formalizes fact data package unlikely see much () change future.","code":""},{"path":"https://jennybc.github.io/gapminder/dev/news/index.html","id":"gapminder-030","dir":"Changelog","previous_headings":"","what":"gapminder 0.3.0","title":"gapminder 0.3.0","text":"CRAN release: 2017-10-31 country_codes new data frame contains ISO 3166-1 country codes (#16 @jrebane). Import tibble::tibble(), tibble printing used box. Moved delimited files practicing data import inst/extdata/. Therefore, now accessible installation , e.g., system.file(\"extdata\", \"gapminder.tsv\", package = \"gapminder\"). Clarify package maintained definitive data source, rather ’s making code examples teaching. Stability now important. Improved citability, e.g. added “concept” DOI links list version DESCRIPTION README. README also shows use citation().","code":""},{"path":"https://jennybc.github.io/gapminder/dev/news/index.html","id":"gapminder-020","dir":"Changelog","previous_headings":"","what":"gapminder 0.2.0","title":"gapminder 0.2.0","text":"CRAN release: 2015-12-31 Added tbl_df class gapminder data frame, advantageous users dplyr package. Changed (corrected?) population variable numeric integer. Affected India (years) China (1952). Moved imputation 1952 China data earlier data cleaning process, added row inst/gapminder-unfiltered.tsv. Added gapminder_unfiltered data frame. ’s data frame gapminder came , less heavily filtered (previously available inst/gapminder-unfiltered.tsv). Added tab-delimited files country continent colors, inst/continent-colors.tsv inst/country-colors.tsv. Added description “international dollars” GDP per capita reported (thanks @aammd, #5).","code":""},{"path":"https://jennybc.github.io/gapminder/dev/news/index.html","id":"gapminder-010","dir":"Changelog","previous_headings":"","what":"gapminder 0.1.0","title":"gapminder 0.1.0","text":"CRAN release: 2015-03-17 Initial CRAN release","code":""}]
